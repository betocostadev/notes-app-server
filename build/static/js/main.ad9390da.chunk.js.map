{"version":3,"sources":["services/notes.js","services/login.js","components/Note.js","components/NoteForm.js","components/LoginForm.js","components/Notification.js","components/Footer.js","components/Togglable.js","App.js","index.js"],"names":["token","getAll","a","axios","get","response","data","create","newObject","config","headers","Authorization","post","update","id","put","remove","delete","setToken","newToken","login","credentials","Note","note","toggleImportance","deleteNote","label","important","className","onClick","content","NoteForm","createNote","useState","newNote","setNewNote","onSubmit","event","preventDefault","Math","random","placeholder","value","onChange","target","type","disabled","length","LoginForm","username","setUsername","password","setPassword","handleFields","name","htmlFor","Notification","message","Footer","style","color","fontStyle","fontSize","Togglable","React","forwardRef","props","ref","visible","setVisible","hideWhenVisible","display","showWhenVisible","toggleVisibility","useImperativeHandle","buttonLabel","children","displayName","App","notes","setNotes","showAll","setShowAll","errorMessage","setErrorMessage","successMessage","setSuccessMessage","notifyType","setNotifyType","user","setUser","useEffect","noteService","initialNotes","error","console","log","fetchNotes","loggedUserJSON","window","localStorage","getItem","JSON","parse","clearNotificationState","setTimeout","handleLogin","userObject","loginService","setItem","stringify","addNote","noteObject","noteFormRef","current","concat","showNotification","useRef","noteList","filter","map","key","find","n","changedNote","then","returnedNote","catch","e","toggleImportanceOf","removeNote","removeItem","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ad9390da.chunk.js","sourcesContent":["import axios from 'axios'\n// const baseURL = 'http://localhost:3001/api/notes' // Old URL using local host\n// const baseUrl = 'https://obscure-anchorage-17694.herokuapp.com/api/notes' // Access building front-end from local host\nconst baseUrl = '/api/notes'\n\nlet token = null\n\nconst setToken = newToken => {\n  token = `bearer ${newToken}`\n}\n\nconst getAll = async () => {\n  const response = await axios.get(baseUrl)\n  return response.data\n}\n\nconst create = async newObject => {\n  const config = {\n    headers: { Authorization: token }\n  }\n  const response = await axios.post(baseUrl, newObject, config)\n  return response.data\n}\n\nconst update = async (id, newObject) => {\n  const response = await axios.put(`${baseUrl}/${id}`, newObject)\n  return response.data\n}\n\nconst remove = async (id) => {\n  const response = await axios.delete(`${baseUrl}/${id}`)\n  return response.data\n}\n\nexport default {\n  getAll,\n  create,\n  update,\n  remove,\n  setToken\n}\n","import axios from 'axios'\nconst baseUrl = '/api/login'\n\nconst login = async credentials => {\n  const response = await axios.post(baseUrl, credentials)\n  return response.data\n}\n\nexport default { login }\n","import React from 'react'\nimport './Note.css'\n\nconst Note = ({ note, toggleImportance, deleteNote }) => {\n  const label = note.important\n    ? 'make not important' : 'make important'\n\n  return (\n    <li className={note.important ? 'note important' : 'note'}>\n      <button className='note-button' onClick={toggleImportance}>{label}</button>\n      <button className='delete-note-button' onClick={deleteNote}>X</button>\n      {note.content}\n    </li>\n  )\n}\n\nexport default Note\n","import React, { useState } from 'react'\nimport './NoteForm.css'\n\nconst NoteForm = ({ createNote }) => {\n  const [newNote, setNewNote] = useState('')\n\n  const handleChange = (event) => {\n    setNewNote(event.target.value)\n  }\n\n  const addNote = (event) => {\n    event.preventDefault()\n    createNote({\n      content: newNote,\n      important: Math.random() > 0.5\n    })\n\n    setNewNote('')\n  }\n\n  return (\n    <form className=\"note-form\" onSubmit={addNote}>\n      <input\n        className=\"note-form-input\"\n        placeholder={'Add a note'}\n        value={newNote}\n        onChange={handleChange}\n      />\n      <button type=\"submit\" disabled={newNote.length ? false : true}>save</button>\n    </form>\n  )\n}\n\nexport default NoteForm\n","import React, { useState } from 'react'\nimport './LoginForm.css'\nimport PropTypes from 'prop-types'\n\nconst LoginForm = ({ login }) => {\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n\n  const handleSubmit = (event) => {\n    event.preventDefault()\n    login({ username, password })\n  }\n\n  const handleFields = (event) => {\n    event.target.name === 'username-input'\n      ? setUsername(event.target.value)\n      : setPassword(event.target.value)\n  }\n\n  return (\n    <div>\n      <h2>Login</h2>\n      <form className=\"login-form\" onSubmit={handleSubmit}>\n        <div>\n          <label htmlFor=\"username-input\">Username:</label>\n          <input\n            className=\"login-input\"\n            id=\"username-input\"\n            type=\"text\"\n            value={username}\n            name=\"username-input\"\n            onChange={handleFields}\n          />\n        </div>\n        <div>\n          <label htmlFor=\"password-input\">Password:</label>\n          <input\n            className=\"login-input\"\n            id=\"password-input\"\n            type=\"password\"\n            value={password}\n            name=\"password-input\"\n            onChange={handleFields}\n          />\n        </div>\n        <button type=\"submit\" disabled={!username.length || !password.length}>login</button>\n      </form>\n    </div>\n  )\n}\n\nLoginForm.propTypes = {\n  login: PropTypes.func.isRequired\n}\n\nexport default LoginForm\n","import React from 'react'\n\nconst Notification = ({ message, type }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className={ type === 'success' ? 'success-message' : 'error-message'}>\n      {message}\n    </div>\n  )\n}\n\nexport default Notification\n","import React from 'react'\n\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  }\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Note app, Department of Computer Science, University of Helsinki 2020</em>\n    </div>\n  )\n}\n\nexport default Footer\n","import React, { useState, useImperativeHandle } from 'react'\nimport PropTypes from 'prop-types'\nimport './Togglable.css'\n\n// ref is received here and forwarded\nconst Togglable = React.forwardRef((props, ref) => {\n  const [visible, setVisible] = useState(false)\n\n  const hideWhenVisible = { display: visible ? 'none' : '' }\n  const showWhenVisible = { display: visible ? '' : 'none' }\n\n  const toggleVisibility = () => {\n    setVisible(!visible)\n  }\n\n  useImperativeHandle(ref, () => {\n    return {\n      toggleVisibility\n    }\n  })\n\n  return (\n    <div className=\"togglable\">\n      <div style={hideWhenVisible}>\n        <button onClick={toggleVisibility}>{props.buttonLabel}</button>\n      </div>\n      <div style={showWhenVisible}>\n        {props.children}\n        <button onClick={toggleVisibility}>cancel</button>\n      </div>\n    </div>\n  )\n})\n\nTogglable.propTypes = {\n  buttonLabel: PropTypes.string.isRequired\n}\n\nTogglable.displayName = 'Togglable'\n\nexport default Togglable\n","import React, { useState, useEffect, useRef } from 'react'\nimport noteService from './services/notes'\nimport loginService from './services/login'\n\nimport Note from './components/Note'\nimport NoteForm from './components/NoteForm'\nimport LoginForm from './components/LoginForm'\nimport Notification from './components/Notification'\nimport Footer from './components/Footer'\nimport Togglable from './components/Togglable'\n\nimport './App.css'\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [successMessage, setSuccessMessage] = useState(null)\n  const [notifyType, setNotifyType] = useState(null)\n  const [user, setUser] = useState(null)\n\n  // useEffect(() => {\n  //   console.log('effect')\n\n  //   const eventHandler = response => {\n  //     console.log('promise fulfilled')\n  //     setNotes(response.data)\n  //   }\n\n  //   const promise = axios.get('http://localhost:3001/notes')\n  //   promise.then(eventHandler)\n  // }, [])\n\n  const hook = () => {\n    // console.log('effect')\n    async function fetchNotes() {\n      let initialNotes = await noteService.getAll()\n      try {\n        // console.log('promise fulfilled')\n        setNotes(initialNotes)\n      } catch (error) {\n        console.log(error)\n      }\n    }\n    fetchNotes()\n  }\n\n  useEffect(hook, [])\n  // console.log('render', notes.length, 'notes')\n\n  useEffect(() => {\n    const loggedUserJSON = window.localStorage.getItem('loggedNoteAppUser')\n    if (loggedUserJSON) {\n      const user = JSON.parse(loggedUserJSON)\n      setUser(user)\n      noteService.setToken(user.token)\n    }\n  }, [])\n\n  const clearNotificationState = () => {\n    setTimeout(() => {\n      setSuccessMessage(null)\n      setErrorMessage(null)\n      setNotifyType(null)\n    }, 3800)\n  }\n\n  const handleLogin = async (userObject) => {\n    try {\n      const user = await loginService.login(userObject)\n      window.localStorage.setItem('loggedNoteAppUser', JSON.stringify(user))\n      noteService.setToken(user.token)\n      setUser(user)\n\n      setSuccessMessage(`Welcome ${user.username}!`)\n      setNotifyType('success')\n      clearNotificationState()\n\n    } catch (error) {\n      setErrorMessage('Wrong credentials')\n      setNotifyType('error')\n      clearNotificationState()\n    }\n  }\n\n  const handleLogout = () => {\n    const loggedUserJSON = window.localStorage.getItem('loggedNoteAppUser')\n    setUser(null)\n    setSuccessMessage('Logout success!')\n    setNotifyType('success')\n    clearNotificationState()\n\n    if (loggedUserJSON) {\n      window.localStorage.removeItem('loggedNoteAppUser')\n    }\n  }\n\n  const addNote = async (noteObject) => {\n    try {\n      noteFormRef.current.toggleVisibility()\n      let newNote = await noteService.create(noteObject)\n      setNotes(notes.concat(newNote))\n      showNotification('add-success')\n    } catch (error) {\n      showNotification('add-error')\n      console.log(error)\n    }\n  }\n\n  const showNotification = (type, content) => {\n    if (type === 'add-error') {\n      setErrorMessage('Error adding a new note!')\n      setNotifyType('error')\n      clearNotificationState()\n    }\n    else if(type === 'note-not-found') {\n      setErrorMessage(`The note '${content}' was already deleted from the server`)\n      setNotifyType('error')\n      clearNotificationState()\n    }\n    else if(type === 'add-success') {\n      setSuccessMessage('note added!')\n      setNotifyType('success')\n      clearNotificationState()\n    }\n  }\n\n  const toggleImportanceOf = id => {\n    // const noteEndpoint = `http://localhost:3001/notes/${id}`\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n\n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      })\n      .catch(e => {\n        console.log(e)\n        showNotification('note-not-found', note.content)\n        setNotes(notes.filter(n => n.id !== id))\n        clearNotificationState()\n      })\n  }\n\n  const removeNote = id => {\n    const note = notes.find(n => n.id === id)\n    noteService\n      .remove(id)\n      .then(() => {\n        setNotes(notes.filter(n => n.id !== id))\n        setSuccessMessage('note removed')\n        setNotifyType('success')\n        clearNotificationState()\n      })\n      .catch(e => {\n        console.log(e)\n        showNotification('note-not-found', note.content)\n        setNotes(notes.filter(n => n.id !== id))\n        clearNotificationState()\n      })\n  }\n\n  const noteFormRef = useRef()\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important)\n\n  const noteList = notesToShow\n    .map((note) => <Note key={note.id} toggleImportance={() => toggleImportanceOf(note.id)} deleteNote={() => removeNote(note.id)} note={note} />)\n\n  // DOM\n  return (\n    <div className='app'>\n      <h1>Notes App</h1>\n      {\n        errorMessage\n          ? <Notification message={errorMessage} type={notifyType} />\n          : successMessage\n            ? <Notification message={successMessage} type={notifyType} />\n            : null\n      }\n      {\n        user === null\n          ?\n          <div>\n            <Togglable buttonLabel='login'>\n              <LoginForm login={handleLogin}\n              />\n            </Togglable>\n          </div>\n          :\n          <div>\n            <p>{user.name} logged-in</p><button onClick={handleLogout}>Logout</button>\n            <Togglable buttonLabel='new note' ref={noteFormRef}>\n              <NoteForm createNote={addNote} />\n            </Togglable>\n          </div>\n      }\n\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show { showAll ? 'important' : 'all' }\n        </button>\n      </div>\n\n      <ul className=\"note-list\">\n        { noteList }\n      </ul>\n\n      <Footer />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\n\nimport App from './App'\n\n// axios\n//   .get('http://localhost:3001/notes')\n//   .then(response => {\n//     const notes = response.data\n//     console.log(notes)\n// })\n\n// const brokenPromise = axios.get('http://localhost:3001/foobar')\n// console.log(brokenPromise)\n\n\nReactDOM.render(\n  <App />,  document.getElementById('root')\n)\n"],"sourceRoot":""}